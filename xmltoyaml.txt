package com.cg.osce.xmltoyaml.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RestController;

@RestController
	@ComponentScan(basePackages = "com.cg.osce")
	@EnableAutoConfiguration
	@CrossOrigin
	public class ApiController {

	    @Autowired
	    private DbConnectionList dbConnectionList;

	    @RequestMapping(method = GET, path = "/api", produces = APPLICATION_JSON_VALUE)
	    public String apiDocsDefault(final HttpServletRequest request,
	                          @RequestParam(required = false) final String format) throws JsonProcessingException {
	        final String connectionName = "h2";
	        final Swagger swaggerDescription = getSwaggerDescription(request, connectionName);
	        if (format != null && format.equals("yaml")) {
	            return Yaml.pretty().writeValueAsString(swaggerDescription);
	        } else {
	            return Json.pretty().writeValueAsString(swaggerDescription);
	        }
	    }

	    @RequestMapping(method = GET, path = "/api/{connectionName}", produces = APPLICATION_JSON_VALUE)
	    public String apiDocs(final HttpServletRequest request,
	        @PathVariable String connectionName,
	        @RequestParam(required = false) final String format) throws JsonProcessingException {
	        final Swagger swaggerDescription = getSwaggerDescription(request, connectionName);
	        if (format != null && format.equals("yaml")) {
	            return Yaml.pretty().writeValueAsString(swaggerDescription);
	        } else {
	            return Json.pretty().writeValueAsString(swaggerDescription);
	        }
	    }

	    private Swagger getSwaggerDescription(HttpServletRequest request, String connectionName) {
	        FsResourceTypes fsResourceTypes = new FsResourceTypes(dbConnectionList.getConnectionByName(connectionName));
	        final List<ResourceType> resourceTypes = fsResourceTypes.resourceTypes();
	        Swagger swagger = new Swagger();

	        swagger.consumes("application/json");
	        swagger.host(request.getServerName() + ":" + request.getServerPort());

	        swagger.setInfo(new Info().version("v1").title("API specification"));
	        swagger.setSchemes(asList(Scheme.HTTP, Scheme.HTTPS));

	        swagger.path("/connections",
	                new Path().get(new Operation()
	                        .tag("connections")
	                        .response(200,
	                                new Response()
	                                        .description("Ok")
	                                        .schema(new ArrayProperty(new RefProperty("connection"))))
	                        .produces("application/json")));
	        swagger.model("connection", new ModelImpl()
	                .property("name", new StringProperty().description("name"))
	                .property("url", new StringProperty().description("url"))
	                .property("user", new StringProperty().description("user"))
	                .property("driverClassName", new StringProperty().description("driverClassName"))
	                .property("configurationFolder", new StringProperty().description("configurationFolder"))
	        );

	        // paths
	        for (ResourceType resourceType : resourceTypes) {

	            PathParameter parameter = new PathParameter().required(true).type("string").name("connection_name");
	            parameter.setDefaultValue(connectionName);
	            swagger.path("/api/{connection_name}/headers/" + resourceType.name(),
	                    new Path().get(
	                            new Operation().description(resourceType.name()).tag("db_objects")
	                                    .parameter(parameter)
	                                    .parameter(new QueryParameter().name("select").type("string"))
	                                    .parameter(new QueryParameter().name("distinct").type("boolean"))
	                                    .parameter(new QueryParameter().name("where").type("string"))
	                                    .parameter(new QueryParameter().name("page").type("string").description("get page by mask [page_count:page_size]"))
	                                    .parameter(new QueryParameter().name("limit").type("integer"))
	                                    .parameter(new QueryParameter().name("orderby").type("string"))
	                                    .parameter(new QueryParameter().name("cache").type("boolean"))
	                                    .response(200, new Response()
	                                            .description("Ok")
	                                            .schema(new ArrayProperty(new RefProperty(resourceType.name()))))
	                                    .produces("application/json")));

	            final List<String> path = resourceType.path();
	            final List<String> newPath = new ArrayList<>();
	            for (String s : path) {
	                newPath.add(s + "_name");
	                List<Parameter> parameterList = new ArrayList<>();
	                PathParameter parameterConnection = new PathParameter().required(true).type("string").name("connection_name");
	                parameterConnection.setDefaultValue(connectionName);
	                parameterList.add(parameterConnection);
	                for (String s1 : newPath) {
	                    final PathParameter pathParameter = new PathParameter().required(true).type("string").name(s1);
	                    pathParameter.setDefaultValue("*");
	                    parameterList.add(pathParameter);
	                }
	                Operation operation = new Operation();
	                operation.setParameters(parameterList);
	                operation.parameter(new QueryParameter().name("select").type("string"));
	                operation.parameter(new QueryParameter().name("distinct").type("boolean"));
	                operation.parameter(new QueryParameter().name("where").type("string"));
	                operation.parameter(new QueryParameter().name("page").type("string").description("get page by mask [page_count:page_size]"));
	                operation.parameter(new QueryParameter().name("limit").type("integer"));
	                operation.parameter(new QueryParameter().name("orderby").type("string"));
	                operation.parameter(new QueryParameter().name("cache").type("boolean"));
	                swagger.path("/api/{connection_name}/headers/" + resourceType.name() + "/" + newPath.stream().map(v -> "{" + v + "}").collect(joining(".")),
	                        new Path().get(
	                                operation.description(resourceType.name()).tag("db_objects")
	                                        .response(200, new Response()
	                                                .description("Ok")
	                                                .schema(new ArrayProperty(new RefProperty(resourceType.name()))))
	                                        .produces("application/json")));
	            }
	       }

	        // definitions
	        for (ResourceType resourceType : resourceTypes) {
	            ModelImpl model = new ModelImpl();
	            Map<String, String> stringStringMap = resourceType.metaData();
	            if (stringStringMap != null) {
	                Set<Entry<String, String>> entries = stringStringMap.entrySet();
	                for (Entry<String, String> stringStringEntry : entries) {
	                    model.property(stringStringEntry.getKey(), new StringProperty().description(stringStringEntry.getValue()));
	                }
	            }
	            swagger.model(resourceType.name(), model);
	        }

	        return swagger;
	    }


	    @RequestMapping(value = "/api/{connectionName}/{type}")
	    public ResponseEntity<List<DbResource>> getResourcesEntireJson(final HttpServletRequest request,
	        @PathVariable String connectionName,
	        @PathVariable String type) {
	        final Uri uri = new SqlPlaceholdersWrapper(new DbUri(parseUri(type, request)));
	        ResourceType fsResourceTypes = new FsResourceTypes(dbConnectionList.getConnectionByName(connectionName));
	        final List<DbResource> collect = fsResourceTypes.read(uri)
	            .collect(toList());
	        if (collect.isEmpty()) {
	            return new ResponseEntity<>(collect, HttpStatus.NO_CONTENT);
	        } else {
	            return new ResponseEntity<>(collect, HttpStatus.OK);
	        }
	    }


	    @RequestMapping(value = "/api/{connectionName}/{type}/{path:.+}")
	    public ResponseEntity<List<DbResource>> getResourcesEntireJson2(final HttpServletRequest request,
	        @PathVariable String connectionName,
	        @PathVariable String type,
	        @PathVariable String path) {
	        final Uri uri = new SqlPlaceholdersWrapper(new DbUri(parseUri(type + "/" + path, request)));
	        ResourceType fsResourceTypes = new FsResourceTypes(dbConnectionList.getConnectionByName(connectionName));
	        final List<DbResource> collect = fsResourceTypes.read(uri).collect(toList());
	        if (collect.isEmpty()) {
	            return new ResponseEntity<>(collect, HttpStatus.NO_CONTENT);
	        } else {
	            return new ResponseEntity<>(collect, HttpStatus.OK);
	        }
	    }



//	    @RequestMapping(value = "/api/body/**", method = GET)
//	    public ResponseEntity<List<SimpleEntry>> getResourcesBodyJson(final HttpServletRequest request)
//	        throws BootException, IOException {
//	        final Uri uri = new DbUri(parseUri(request).substring(10));
//	        fsResourceTypes.init(null);
//	        final List<SimpleEntry> bodyList = fsResourceTypes.read(uri)
//	            .map(v -> new SimpleEntry(v.dbUri().toString().toLowerCase(), v.body()))
//	            .collect(toList());
//	        return new ResponseEntity<>(bodyList, HttpStatus.OK);
//	    }
	//
//	    @RequestMapping(value = "/api/body/**", method = GET, consumes = TEXT_PLAIN_VALUE, produces = TEXT_PLAIN_VALUE)
//	    public ResponseEntity<String> getResourcesBodyTextPlain(final HttpServletRequest request)
//	        throws BootException, IOException {
//	        final Uri uri = new DbUri(parseUri(request).substring(10));
//	        fsResourceTypes.init(null);
//	        final String collect = fsResourceTypes.read(uri)
//	            .map(DbResource::body)
//	            .collect(Collectors.joining("\n"));
//	        return new ResponseEntity<>(collect, HttpStatus.OK);
//	    }


	    @RequestMapping(value = "/api/{connectionName}/headers/{type}/{path:.+}", method = GET)
	    public ResponseEntity<List<Map<String, Object>>> getResourcesHeadersJson(
	        final HttpServletRequest request,
	        @PathVariable String connectionName,
	        @PathVariable String type,
	        @PathVariable String path) throws BootException, IOException {
	        final Uri uri = new SqlPlaceholdersWrapper(new DbUri(parseUri(type + "/" + path, request)));
	        ResourceType fsResourceTypes = new FsResourceTypes(dbConnectionList.getConnectionByName(connectionName));
	        final List<Map<String, Object>> headers = fsResourceTypes
	            .read(uri)
	            .map(DbResource::headers)
	            .collect(toList());
	        if (headers.isEmpty()) {
	            return new ResponseEntity<>(headers, HttpStatus.NO_CONTENT);
	        } else {
	            return new ResponseEntity<>(headers, HttpStatus.OK);
	        }
	    }

	    @RequestMapping(value = "/api/{connectionName}/headers/{type}", method = GET)
	    public ResponseEntity<List<Map<String, Object>>> getResourcesHeadersJson2(
	        final HttpServletRequest request,
	        @PathVariable String connectionName,
	        @PathVariable String type) throws BootException, IOException {
	        final Uri uri = new SqlPlaceholdersWrapper(new DbUri(parseUri(type, request)));
	        ResourceType fsResourceTypes = new FsResourceTypes(dbConnectionList.getConnectionByName(connectionName));
	        final List<Map<String, Object>> headers = fsResourceTypes
	            .read(uri)
	            .map(DbResource::headers)
	            .collect(toList());
	        if (headers.isEmpty()) {
	            return new ResponseEntity<>(headers, HttpStatus.NO_CONTENT);
	        } else {
	            return new ResponseEntity<>(headers, HttpStatus.OK);
	        }
	    }

	    private String parseUri(String path, final HttpServletRequest request) {
	        final String uriString;
	        if (request.getQueryString() == null || request.getQueryString().isEmpty()) {
	            uriString = path;
	        } else {
	            uriString = path + "?" + request.getQueryString();
	        }
	        return uriString;
	    }

	}
}
















package com.cg.osce.xmltoyaml.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.core.JsonProcessingException;

import io.swagger.models.Swagger;
import springfox.documentation.spring.web.json.Json;

public class Controller {
	@RequestMapping(method = RequestMethod.GET, path = "/api/{connectionName}", produces = APPLICATION_JSON_VALUE)
	public String apiDocs(final HttpServletRequest request,
	    @PathVariable String connectionName,
	    @RequestParam(required = false) final String format) throws JsonProcessingException {
	    final Swagger swaggerDescription = getSwaggerDescription(request, connectionName);
	    if (format != null && format.equals("yaml")) {
	        return Yaml.pretty().writeValueAsString(swaggerDescription);
	    } else {
	        return Json.pretty().writeValueAsString(swaggerDescription);
	    }
	}
}




<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.1 http://maven.apache.org/xsd/maven-4.0.1.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.cg.osce</groupId>
	<artifactId>xmltoyaml</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>xmltoyaml</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/jaxb2-maven-plugin -->
<dependency>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>jaxb2-maven-plugin</artifactId>
   	<version>2.4</version> 
</dependency>
		<dependency>
  <groupId>io.springfox</groupId>
  <artifactId>springfox-swagger2</artifactId>
  <version>2.9.2</version>
</dependency>
<dependency>
  <groupId>io.springfox</groupId>
  <artifactId>springfox-swagger-ui</artifactId>
  <version>2.9.2</version>
</dependency>
		
		</dependencies>

	<build>
		<pluginManagement>
        <plugins>
            <!--
                If we e.g. execute on JDK 1.7, we should compile for Java 7 to get
                the same (or higher) JAXB API version as used during the xjc execution.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </pluginManagement>
    <plugins>
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>jaxb2-maven-plugin</artifactId>
            <version>2.4</version>
            <executions>
                <execution>
                    <id>xjc</id>
                    <goals>
                        <goal>xjc</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <!-- The package of your generated sources -->
                <packageName>com.example.myschema</packageName>
            </configuration>
        </plugin>
        </plugins>
	</build>

</project>
